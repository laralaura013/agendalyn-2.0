generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               String           @id @default(cuid())
  name             String
  phone            String?
  address          String?
  stripeCustomerId String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isActive         Boolean          @default(true)
  anamnesisForms   AnamnesisForm[]
  appointments     Appointment[]
  brands           Brand[]
  cashierSessions  CashierSession[]
  categories       Category[]
  clients          Client[]
  goals            Goal[]
  orders           Order[]
  packages         Package[]
  products         Product[]
  services         Service[]
  subscription     Subscription?
  users            User[]
  scheduleBlocks   ScheduleBlock[]   // <-- adicionado
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String
  password             String
  role                 Role                  @default(STAFF)
  commission           Decimal?              @db.Decimal(5, 2)
  workSchedule         Json?
  companyId            String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  showInBooking        Boolean               @default(true)
  appointments         Appointment[]
  goals                Goal[]
  orders               Order[]
  packageSessionUsages PackageSessionUsage[]
  company              Company               @relation(fields: [companyId], references: [id])
  services             Service[]             @relation("ServiceToUser")
  scheduleBlocks       ScheduleBlock[]       // <-- adicionado (bloqueios por profissional)
}

model Service {
  id           String        @id @default(cuid())
  name         String
  price        Decimal       @db.Decimal(10, 2)
  duration     Int
  companyId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  goals        Goal[]
  orderItems   OrderItem[]
  company      Company       @relation(fields: [companyId], references: [id])
  packages     Package[]     @relation("PackageServices")
  availableTo  User[]        @relation("ServiceToUser")
}

model Client {
  id               String            @id @default(cuid())
  name             String
  phone            String
  birthDate        DateTime?
  notes            String?
  companyId        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  email            String?
  password         String?
  anamnesisAnswers AnamnesisAnswer[]
  appointments     Appointment[]
  company          Company           @relation(fields: [companyId], references: [id])
  packages         ClientPackage[]
  orders           Order[]

  @@unique([companyId, email])
}

model Appointment {
  id                  String                @id @default(cuid())
  start               DateTime
  end                 DateTime
  notes               String?
  status              AppointmentStatus     @default(SCHEDULED)
  companyId           String
  serviceId           String
  userId              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  clientId            String
  anamnesisAnswers    AnamnesisAnswer[]
  client              Client                @relation(fields: [clientId], references: [id])
  company             Company               @relation(fields: [companyId], references: [id])
  service             Service               @relation(fields: [serviceId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  packageSessionUsage PackageSessionUsage[]
}

model Order {
  id        String      @id @default(cuid())
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(OPEN)
  companyId String
  clientId  String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  client    Client      @relation(fields: [clientId], references: [id])
  company   Company     @relation(fields: [companyId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  serviceId String?
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String?
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
}

model CashierSession {
  id             String        @id @default(cuid())
  openingBalance Decimal       @db.Decimal(10, 2)
  closingBalance Decimal?      @db.Decimal(10, 2)
  openedAt       DateTime      @default(now())
  closedAt       DateTime?
  status         CashierStatus @default(OPEN)
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
  transactions   Transaction[]
}

model Transaction {
  id               String          @id @default(cuid())
  type             TransactionType
  amount           Decimal         @db.Decimal(10, 2)
  description      String
  cashierSessionId String
  createdAt        DateTime        @default(now())
  cashierSession   CashierSession  @relation(fields: [cashierSessionId], references: [id])
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  price         Decimal        @db.Decimal(10, 2)
  features      Json
  stripePriceId String         @unique
  subscriptions Subscription[]
}

model Subscription {
  id                   String             @id @default(cuid())
  status               SubscriptionStatus @default(INCOMPLETE)
  currentPeriodEnd     DateTime?
  companyId            String             @unique
  planId               String
  stripeSubscriptionId String?            @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  company              Company            @relation(fields: [companyId], references: [id])
  plan                 Plan               @relation(fields: [planId], references: [id])
}

model Goal {
  id          String   @id @default(cuid())
  type        GoalType
  targetValue Decimal  @db.Decimal(10, 2)
  month       Int
  year        Int
  companyId   String
  userId      String?
  serviceId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  service     Service? @relation(fields: [serviceId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@unique([month, year, companyId, userId, serviceId])
}

model AnamnesisForm {
  id        String            @id @default(cuid())
  title     String
  questions Json
  companyId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  answers   AnamnesisAnswer[]
  company   Company           @relation(fields: [companyId], references: [id])
}

model AnamnesisAnswer {
  id            String        @id @default(cuid())
  formId        String
  clientId      String
  answers       Json
  appointmentId String?
  createdAt     DateTime      @default(now())
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  client        Client        @relation(fields: [clientId], references: [id])
  form          AnamnesisForm @relation(fields: [formId], references: [id])
}

model Package {
  id             String          @id @default(cuid())
  name           String
  price          Decimal         @db.Decimal(10, 2)
  sessions       Int
  validityDays   Int
  companyId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  clientPackages ClientPackage[]
  company        Company         @relation(fields: [companyId], references: [id])
  services       Service[]       @relation("PackageServices")
}

model ClientPackage {
  id                String                @id @default(cuid())
  clientId          String
  packageId         String
  sessionsRemaining Int
  expiresAt         DateTime
  createdAt         DateTime              @default(now())
  client            Client                @relation(fields: [clientId], references: [id])
  package           Package               @relation(fields: [packageId], references: [id])
  sessionUsages     PackageSessionUsage[]
}

model PackageSessionUsage {
  id              String        @id @default(cuid())
  clientPackageId String
  usedAt          DateTime      @default(now())
  appointmentId   String?
  userId          String
  appointment     Appointment?  @relation(fields: [appointmentId], references: [id])
  clientPackage   ClientPackage @relation(fields: [clientPackageId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  products  Product[]

  @@unique([name, companyId])
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  products  Product[]

  @@unique([name, companyId])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  cost        Decimal?    @db.Decimal(10, 2)
  stock       Int         @default(0)
  companyId   String
  categoryId  String?
  brandId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  brand       Brand?      @relation(fields: [brandId], references: [id])
  category    Category?   @relation(fields: [categoryId], references: [id])
  company     Company     @relation(fields: [companyId], references: [id])
}

//
// ---- NOVO MODELO PARA BLOQUEIO DE HORÁRIOS ----
//
model ScheduleBlock {
  id             String   @id @default(cuid())
  companyId      String
  professionalId String?   // opcional: bloqueio geral da empresa ou por profissional
  date           DateTime  // data (00:00); horas em startTime/endTime
  startTime      String    // "HH:mm"
  endTime        String    // "HH:mm"
  reason         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  company        Company   @relation(fields: [companyId], references: [id])
  professional   User?     @relation(fields: [professionalId], references: [id])

  @@index([companyId, date])
  @@index([professionalId, date])
}

enum Role {
  OWNER
  STAFF
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELED
  COMPLETED
}

enum OrderStatus {
  OPEN
  FINISHED
  CANCELED
}

enum CashierStatus {
  OPEN
  CLOSED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  PAST_DUE
}

enum GoalType {
  TOTAL
  BY_USER
  BY_SERVICE
}
