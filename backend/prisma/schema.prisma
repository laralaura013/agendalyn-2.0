generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                 String          @id @default(cuid())
  name               String
  phone              String?
  address            String?
  stripeCustomerId   String?         @unique
  users              User[]
  services           Service[]
  appointments       Appointment[]
  clients            Client[]
  orders             Order[]
  cashierSessions    CashierSession[]
  subscription       Subscription?
  anamnesisForms     AnamnesisForm[]
  packages           Package[]
  goals              Goal[]
  products           Product[]
  categories         Category[]
  brands             Brand[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  name                 String
  password             String
  role                 Role                  @default(STAFF)
  commission           Decimal?              @db.Decimal(5, 2)
  workSchedule         Json?
  companyId            String
  company              Company               @relation(fields: [companyId], references: [id])
  appointments         Appointment[]
  services             Service[]             @relation("ServiceToUser")
  orders               Order[]
  packageSessionUsages PackageSessionUsage[]
  goals                Goal[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Service {
  id            String        @id @default(cuid())
  name          String
  price         Decimal       @db.Decimal(10, 2)
  duration      Int
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id])
  appointments  Appointment[]
  orderItems    OrderItem[]
  availableTo   User[]        @relation("ServiceToUser")
  packages      Package[]     @relation("PackageServices")
  goals         Goal[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Client {
  id               String          @id @default(cuid())
  name             String
  phone            String
  birthDate        DateTime?
  notes            String?
  companyId        String
  company          Company         @relation(fields: [companyId], references: [id])
  orders           Order[]
  anamnesisAnswers AnamnesisAnswer[]
  packages         ClientPackage[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Appointment {
  id                  String                @id @default(cuid())
  clientName          String
  clientPhone         String
  start               DateTime
  end                 DateTime
  notes               String?
  status              AppointmentStatus     @default(SCHEDULED)
  companyId           String
  company             Company               @relation(fields: [companyId], references: [id])
  serviceId           String
  service             Service               @relation(fields: [serviceId], references: [id])
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  anamnesisAnswers    AnamnesisAnswer[]
  packageSessionUsage PackageSessionUsage[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Order {
  id        String      @id @default(cuid())
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(OPEN)
  companyId String
  company   Company     @relation(fields: [companyId], references: [id])
  clientId  String
  client    Client      @relation(fields: [clientId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
}

model CashierSession {
  id             String        @id @default(cuid())
  openingBalance Decimal       @db.Decimal(10, 2)
  closingBalance Decimal?      @db.Decimal(10, 2)
  openedAt       DateTime      @default(now())
  closedAt       DateTime?
  status         CashierStatus @default(OPEN)
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
  transactions   Transaction[]
}

model Transaction {
  id               String          @id @default(cuid())
  type             TransactionType
  amount           Decimal         @db.Decimal(10, 2)
  description      String
  cashierSessionId String
  cashierSession   CashierSession  @relation(fields: [cashierSessionId], references: [id])
  createdAt        DateTime        @default(now())
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique
  price         Decimal        @db.Decimal(10, 2)
  features      Json
  stripePriceId String         @unique
  subscriptions Subscription[]
}

model Subscription {
  id                   String             @id @default(cuid())
  status               SubscriptionStatus @default(INCOMPLETE)
  currentPeriodEnd     DateTime?
  companyId            String             @unique
  company              Company            @relation(fields: [companyId], references: [id])
  planId               String
  plan                 Plan               @relation(fields: [planId], references: [id])
  stripeSubscriptionId String?            @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Goal {
  id          String   @id @default(cuid())
  type        GoalType
  targetValue Decimal  @db.Decimal(10, 2)
  month       Int
  year        Int
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  serviceId   String?
  service     Service? @relation(fields: [serviceId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([month, year, companyId, userId, serviceId])
}

model AnamnesisForm {
  id          String            @id @default(cuid())
  title       String
  questions   Json
  companyId   String
  company     Company           @relation(fields: [companyId], references: [id])
  answers     AnamnesisAnswer[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model AnamnesisAnswer {
  id            String        @id @default(cuid())
  formId        String
  form          AnamnesisForm @relation(fields: [formId], references: [id])
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id])
  answers       Json
  appointmentId String?
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  createdAt     DateTime      @default(now())
}

model Package {
  id             String          @id @default(cuid())
  name           String
  price          Decimal         @db.Decimal(10, 2)
  sessions       Int
  validityDays   Int
  companyId      String
  company        Company         @relation(fields: [companyId], references: [id])
  services       Service[]       @relation("PackageServices")
  clientPackages ClientPackage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ClientPackage {
  id                String                @id @default(cuid())
  clientId          String
  client            Client                @relation(fields: [clientId], references: [id])
  packageId         String
  package           Package               @relation(fields: [packageId], references: [id])
  sessionsRemaining Int
  expiresAt         DateTime
  createdAt         DateTime              @default(now())
  sessionUsages     PackageSessionUsage[]
}

model PackageSessionUsage {
  id              String        @id @default(cuid())
  clientPackageId String
  clientPackage   ClientPackage @relation(fields: [clientPackageId], references: [id])
  usedAt          DateTime      @default(now())
  appointmentId   String?
  appointment     Appointment?  @relation(fields: [appointmentId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  products  Product[]
  @@unique([name, companyId])
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  products  Product[]
  @@unique([name, companyId])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Decimal    @db.Decimal(10, 2)
  cost        Decimal?   @db.Decimal(10, 2)
  stock       Int        @default(0)
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?     @relation(fields: [brandId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// --- SEÇÃO ENUM CORRIGIDA ---
enum Role {
  OWNER
  STAFF
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELED
  COMPLETED
}

enum OrderStatus {
  OPEN
  FINISHED
  CANCELED
}

enum CashierStatus {
  OPEN
  CLOSED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  PAST_DUE
}

enum GoalType {
  TOTAL
  BY_USER
  BY_SERVICE
}