generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnamnesisAnswer {
  id            String        @id
  formId        String
  clientId      String
  answers       Json
  appointmentId String?
  createdAt     DateTime      @default(now())
  Appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  Client        Client        @relation(fields: [clientId], references: [id])
  AnamnesisForm AnamnesisForm @relation(fields: [formId], references: [id])
}

model AnamnesisForm {
  id              String            @id
  title           String
  questions       Json
  companyId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  AnamnesisAnswer AnamnesisAnswer[]
  Company         Company           @relation(fields: [companyId], references: [id])
}

model Appointment {
  id                  String                @id
  start               DateTime
  end                 DateTime
  notes               String?
  status              AppointmentStatus     @default(SCHEDULED)
  companyId           String
  serviceId           String
  userId              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  clientId            String
  AnamnesisAnswer     AnamnesisAnswer[]
  Client              Client                @relation(fields: [clientId], references: [id])
  Company             Company               @relation(fields: [companyId], references: [id])
  Service             Service               @relation(fields: [serviceId], references: [id])
  User                User                  @relation(fields: [userId], references: [id])
  PackageSessionUsage PackageSessionUsage[]
}

model Brand {
  id        String    @id
  name      String
  companyId String
  Company   Company   @relation(fields: [companyId], references: [id])
  Product   Product[]

  @@unique([name, companyId])
}

model CashierSession {
  id             String        @id
  openingBalance Decimal       @db.Decimal(10, 2)
  closingBalance Decimal?      @db.Decimal(10, 2)
  openedAt       DateTime      @default(now())
  closedAt       DateTime?
  status         CashierStatus @default(OPEN)
  companyId      String
  Company        Company       @relation(fields: [companyId], references: [id])
  Transaction    Transaction[]
}

model Category {
  id        String    @id
  name      String
  companyId String
  Company   Company   @relation(fields: [companyId], references: [id])
  Product   Product[]

  @@unique([name, companyId])
}

model Client {
  id              String            @id
  name            String
  phone           String
  birthDate       DateTime?
  notes           String?
  companyId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  email           String?
  password        String?
  AnamnesisAnswer AnamnesisAnswer[]
  Appointment     Appointment[]
  Company         Company           @relation(fields: [companyId], references: [id])
  ClientPackage   ClientPackage[]
  Order           Order[]

  @@unique([companyId, email])
}

model ClientPackage {
  id                  String                @id
  clientId            String
  packageId           String
  sessionsRemaining   Int
  expiresAt           DateTime
  createdAt           DateTime              @default(now())
  Client              Client                @relation(fields: [clientId], references: [id])
  Package             Package               @relation(fields: [packageId], references: [id])
  PackageSessionUsage PackageSessionUsage[]
}

model Company {
  id               String           @id
  name             String
  phone            String?
  address          String?
  stripeCustomerId String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  AnamnesisForm    AnamnesisForm[]
  Appointment      Appointment[]
  Brand            Brand[]
  CashierSession   CashierSession[]
  Category         Category[]
  Client           Client[]
  Goal             Goal[]
  Order            Order[]
  Package          Package[]
  Product          Product[]
  Service          Service[]
  Subscription     Subscription?
  User             User[]
}

model Goal {
  id          String   @id
  type        GoalType
  targetValue Decimal  @db.Decimal(10, 2)
  month       Int
  year        Int
  companyId   String
  userId      String?
  serviceId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Company     Company  @relation(fields: [companyId], references: [id])
  Service     Service? @relation(fields: [serviceId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])

  @@unique([month, year, companyId, userId, serviceId])
}

model Order {
  id        String      @id
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(OPEN)
  companyId String
  clientId  String
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  Client    Client      @relation(fields: [clientId], references: [id])
  Company   Company     @relation(fields: [companyId], references: [id])
  User      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
}

model OrderItem {
  id        String   @id
  orderId   String
  serviceId String?
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String?
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  Service   Service? @relation(fields: [serviceId], references: [id])
}

model Package {
  id            String          @id
  name          String
  price         Decimal         @db.Decimal(10, 2)
  sessions      Int
  validityDays  Int
  companyId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  ClientPackage ClientPackage[]
  Company       Company         @relation(fields: [companyId], references: [id])
  Service       Service[]       @relation("PackageServices")
}

model PackageSessionUsage {
  id              String        @id
  clientPackageId String
  usedAt          DateTime      @default(now())
  appointmentId   String?
  userId          String
  Appointment     Appointment?  @relation(fields: [appointmentId], references: [id])
  ClientPackage   ClientPackage @relation(fields: [clientPackageId], references: [id])
  User            User          @relation(fields: [userId], references: [id])
}

model Plan {
  id            String         @id
  name          String         @unique
  price         Decimal        @db.Decimal(10, 2)
  features      Json
  stripePriceId String         @unique
  Subscription  Subscription[]
}

model Product {
  id          String      @id
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  cost        Decimal?    @db.Decimal(10, 2)
  stock       Int         @default(0)
  companyId   String
  categoryId  String?
  brandId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  OrderItem   OrderItem[]
  Brand       Brand?      @relation(fields: [brandId], references: [id])
  Category    Category?   @relation(fields: [categoryId], references: [id])
  Company     Company     @relation(fields: [companyId], references: [id])
}

model Service {
  id          String        @id
  name        String
  price       Decimal       @db.Decimal(10, 2)
  duration    Int
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Appointment Appointment[]
  Goal        Goal[]
  OrderItem   OrderItem[]
  Company     Company       @relation(fields: [companyId], references: [id])
  Package     Package[]     @relation("PackageServices")
  User        User[]
}

model Subscription {
  id                   String             @id
  status               SubscriptionStatus @default(INCOMPLETE)
  currentPeriodEnd     DateTime?
  companyId            String             @unique
  planId               String
  stripeSubscriptionId String?            @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  Company              Company            @relation(fields: [companyId], references: [id])
  Plan                 Plan               @relation(fields: [planId], references: [id])
}

model Transaction {
  id               String          @id
  type             TransactionType
  amount           Decimal         @db.Decimal(10, 2)
  description      String
  cashierSessionId String
  createdAt        DateTime        @default(now())
  CashierSession   CashierSession  @relation(fields: [cashierSessionId], references: [id])
}

model User {
  id                  String                @id
  email               String                @unique
  name                String
  password            String
  role                Role                  @default(STAFF)
  commission          Decimal?              @db.Decimal(5, 2)
  workSchedule        Json?
  companyId           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  showInBooking       Boolean               @default(true)
  Appointment         Appointment[]
  Goal                Goal[]
  Order               Order[]
  PackageSessionUsage PackageSessionUsage[]
  Company             Company               @relation(fields: [companyId], references: [id])
  Service             Service[]
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELED
  COMPLETED
}

enum CashierStatus {
  OPEN
  CLOSED
}

enum GoalType {
  TOTAL
  BY_USER
  BY_SERVICE
}

enum OrderStatus {
  OPEN
  FINISHED
  CANCELED
}

enum Role {
  OWNER
  STAFF
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  PAST_DUE
}

enum TransactionType {
  INCOME
  EXPENSE
}
