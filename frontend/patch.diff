diff --git a/src/components/mobile/FloatingActions.jsx b/src/components/mobile/FloatingActions.jsx
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/src/components/mobile/FloatingActions.jsx
@@ -0,0 +1,116 @@
+import React, { useMemo, useState } from "react";
+import { Plus } from "lucide-react";
+import { useLocation, useNavigate } from "react-router-dom";
+
+/**
+ * FAB + Speed-dial
+ *
+ * Props:
+ * - area?: "admin" | "client" (opcional, só se não passar "actions")
+ * - actions?: Array<{ id:string, label:string, icon:ReactNode, run:()=>void }>
+ * - hideOn?: string[]  rotas onde o FAB não aparece (prefix match)
+ */
+export default function FloatingActions({ area = "admin", actions: actionsProp, hideOn = ["/dashboard/settings"] }) {
+  const [open, setOpen] = useState(false);
+  const { pathname } = useLocation();
+  const navigate = useNavigate();
+
+  const defaultActions = useMemo(() => {
+    if (area === "admin") {
+      return [
+        { id: "schedule", label: "Agendar horário", icon: null, run: () => navigate("/dashboard/schedule") },
+        {
+          id: "share-link",
+          label: "Link de agendamento",
+          icon: null,
+          run: async () => {
+            const url = `${window.location.origin}/agendar/`;
+            try { await navigator.clipboard.writeText(url); alert("Link copiado!"); } catch { alert(url); }
+          },
+        },
+        { id: "open-order", label: "Abrir comanda", icon: null, run: () => navigate("/dashboard/orders") },
+        { id: "waitlist", label: "Lista de espera", icon: null, run: () => navigate("/dashboard/waitlist") },
+      ];
+    }
+    return [
+      { id: "new-booking", label: "Novo agendamento", icon: null, run: () => navigate("/portal/agenda") },
+      { id: "packages", label: "Meus pacotes", icon: null, run: () => navigate("/portal/pacotes") },
+    ];
+  }, [area, navigate]);
+
+  const actions = actionsProp?.length ? actionsProp : defaultActions;
+
+  const hidden = (hideOn || []).some((h) => pathname.startsWith(h));
+  if (hidden) return null;
+
+  return (
+    <div className="fixed right-4 bottom-24 z-50">
+      {/* itens quando aberto */}
+      <div className={`flex flex-col items-end gap-2 transition-all duration-200 ${open ? "opacity-100 translate-y-0" : "opacity-0 translate-y-2 pointer-events-none"}`}>
+        {actions.map((a) => (
+          <button
+            key={a.id}
+            onClick={() => { setOpen(false); a.run?.(); }}
+            className="px-3 py-2 bg-white rounded-full shadow-lg border border-gray-200 text-sm flex items-center gap-2"
+          >
+            <span>{a.label}</span>{a.icon}
+          </button>
+        ))}
+      </div>
+
+      {/* botão principal (azul) */}
+      <button
+        onClick={() => setOpen(v => !v)}
+        className="w-14 h-14 rounded-full shadow-xl bg-[#1976d2] text-white flex items-center justify-center"
+        aria-label="Ações rápidas"
+        title={open ? "Fechar ações" : "Abrir ações"}
+      >
+        {open ? "✕" : <Plus size={24} />}
+      </button>
+    </div>
+  );
+}
diff --git a/src/pages/Schedule.jsx b/src/pages/Schedule.jsx
index deadbee..b00b135 100644
--- a/src/pages/Schedule.jsx
+++ b/src/pages/Schedule.jsx
@@ -1,36 +1,34 @@
 import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
 import { parseISO } from "date-fns";
 import toast from "react-hot-toast";
 import {
   PlusCircle,
   ChevronLeft,
   ChevronRight,
   Lock,
   Calendar as CalendarIcon,
   List,
   ClipboardList,
   Filter,
   X,
   CheckCircle2,
   CalendarDays,
   Link2,
   FileText,
 } from "lucide-react";
 import { useNavigate } from "react-router-dom";
 
 import useAppShellMode from "../hooks/useAppShellMode";
 import api from "../services/api";
 import Calendar from "../components/schedule/Calendar";
 import AppointmentModal from "../components/schedule/AppointmentModal";
 import FloatingActions from "../components/mobile/FloatingActions";
@@
 const DEFAULT_SLOT_MINUTES = 30;
 
 export default function Schedule() {
   const { isMobile } = useAppShellMode();
   const navigate = useNavigate();
@@
-  // slots & waitlist
-  the: null
+  // slots & waitlist
   const [slotsLoading, setSlotsLoading] = useState(false);
   const [availableSlots, setAvailableSlots] = useState([]); // ["07:00", ...]
   const [waitlist, setWaitlist] = useState([]);
   const [waitlistLoading, setWaitlistLoading] = useState(false);
@@
   if (isMobile) {
     // ====== LAYOUT MOBILE ======
     return (
       <div className="relative p-3 max-w-md mx-auto">
         {/* Esconde toolbar do react-big-calendar no mobile */}
         <style>{`@media (max-width:767px){ .rbc-toolbar{display:none!important} }`}</style>
@@
         {/* SpeedDial (FAB) */}
         <FloatingActions
           hideOn={[]}
           actions={[
             { id: "agendar", label: "Agendar horário", icon: <CalendarDays className="w-5 h-5" />, run: () => openEmptyModal() },
             { id: "link", label: "Link de agendamento", icon: <Link2 className="w-5 h-5" />, run: async () => {
                 const url = `${window.location.origin}/agendar/`;
                 try { await navigator.clipboard.writeText(url); toast.success("Link copiado!"); }
                 catch { toast.error("Não consegui copiar o link."); }
               }},
             { id: "comanda", label: "Abrir comanda", icon: <FileText className="w-5 h-5" />, run: () => navigate("/dashboard/orders") },
             { id: "espera", label: "Lista de espera", icon: <List className="w-5 h-5" />, run: () => { setOpenWaitlist(true); const ac=new AbortController(); fetchWaitlist(ac.signal); } },
             { id: "bloquear", label: "Bloquear horário", icon: <Lock className="w-5 h-5" />, run: () => setOpenBlockTime(true) },
           ]}
         />
@@
       </div>
     );
   }
